# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application
on:
  push:
    branches: [main]
env:
  PYTHON_VERSION: 3.11
  DEV_ENV: production
jobs:
  build:
    name: raw code checkout & testing
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Set up Node.js Which is a runtime environment that executes JavaScript code outside of a web browser. SonarQube scanner needs this
        uses: actions/setup-node@v3
      - name: Install python dependencies
        run: |
          pip install -r requirements.txt
          npm install -D @sonar/scan
      # - name: Run Snyk to check for vulnerabilities, only fail on high-severity issues.
      #   uses: snyk/actions/python@master
      #   with: 
      #     args: --severity-threshold=high --all-projects
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk and output JSON
        run: |
          snyk test --all-projects --json > snyk-results.json
          cat snyk-results.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Run Snyk and output SARIF. 
        run: |
          snyk test --all-projects --sarif > snyk-results.sarif
          cat snyk-results.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload SARIF to GitHub. GitHub parses this SARIF file and shows security issues as inline annotations and inside the Security > Code scanning alerts UI.
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-results.sarif    
      - name: Configure SonarQube
        run: |
          cat > sonar-project.properties << EOF
          sonar.host.url=https://sonarcloud.io
          sonar.login=${{ secrets.SONAR_TOKEN }}
          sonar.projectKey=bleeng089_AWSUltramarine
          sonar.organization=bleeng089
          sonar.sources=.
          sonar.host.url=https://sonarcloud.io
          EOF
      - name: Run SonarQube scanner
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner 
          if [ $? -ne 0 ]; then 
            echo "SonarScanner detected issues, fetching details..." 
          else 
           RESPONSE=$(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/issues/search?componentKeys=bleeng089&severities=BLOCKER,CRITICAL&statuses=OPEN")
           # jq: A lightweight and flexible command-line JSON processor
           echo "$RESPONSE" | jq . > entire_JSON_output.json
           cat entire_JSON_output.json
           fi
      - name: Lint with Flake8. https://flake8.pycqa.org/en/latest/index.html
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > lint.txt
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics >> lint.txt
          cat lint.txt
      - name: Test with pytest
        run: |-
          # performs a pytest in the current working dir. The -ver = verbose flag provides a more detailed output.
          pytest -v > pytest.txt
          cat pytest.txt
      - name: 'Upload Artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: lint.txt, pytest.txt, entire_JSON_output.json, snyk-results.json, snyk-results.sarif
          path: .
          retention-days: 1